[
{
	"uri": "//localhost:1313/",
	"title": "Data Pipeline Management",
	"tags": [],
	"description": "",
	"content": "Create a Data Pipeline to backup and analyze daily data Overall In this lab, you\u0026rsquo;ll learn the basical pipeline when you want to collect and analyze the data of a website daily.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Create VPC",
	"tags": [],
	"description": "",
	"content": "Create VPC Lab VPC Go to VPC service management console Click Your VPC. Click Create VPC. At the Create VPC page. Click on VPC and more In the Name tag field, enter DE. In the IPv4 CIDR field, enter: 10.10.0.0/16. Scroll down, we will keep the remaining default settings (2 AZs, 2 public subnets and 2 private subnets), because RDS forces us to have at least 2 AZs and 2 subnets. Then click Create VPC. "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Session Manager is a function within the AWS System Manager service, SSM provides verifiable and secure version management without opening incoming ports, without Bastion Host or SSH key management. Session Manager also makes it easy to comply with corporate policies that require controlled access to instances, strict security practices, and fully auditable logs with instance access details, while still providing end-users with one-click cross-platform access to your managed instances.\nBy using Session Manager, you get the following advantages that traditional methods do not have:\nNo need to open port 22 for SSH protocol, so it is more secure. Can be configured so that the connection does not need to go outside the internet, so it is more secure. No need to manage the server\u0026rsquo;s private key to connect to SSH. Centralized management of users using AWS IAM. Access to the server easily and simply with one click. Faster access time than traditional methods like SSH Support many different operating systems such as Linux, Windows, MacOS Log the connection sessions and commands executed while connecting to the server. With the above advantages, you can use Session Manager instead of using Bastion host technique to save us time and money when managing Bastion server.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/",
	"title": "Preparing VPC, EC2 and RDS",
	"tags": [],
	"description": "",
	"content": "In this step, we will need to create a VPC with 2 public / private subnets. Then create 1 EC2 Instance Linux located in the public subnet, 1 RDS Instance MySQL located in the private subnet. And we need to connect the Linux instance to the RDS MySQL instance.\nThe architecture overview after you complete this step will be as follows:\nContent Create VPC with public and private subnets Create security group Create public Linux server Create private RDS instance "
},
{
	"uri": "//localhost:1313/3-deploy/3.1-set-up-mysql-instance/",
	"title": "Set up MySQL instance",
	"tags": [],
	"description": "",
	"content": "Since the RDS instance is private, we must connect to EC2 instance to connect to it.\nGo to EC2 service management console. Click on Instances. Choose Linux instance we created. Click Connect to connect to this instance. Choose Connect using EC2 Instance Connect, then click Connect. Now we should see a terminal for this Linux instance. Enter sudo apt update to check for new updates. Enter sudo apt install mysql-server to install MySQL. Access to MySQL by typing sudo mysql. But we should login without using sudo command. To do that, we can set up a password for root user. Enter ALTER USER \u0026lsquo;root\u0026rsquo;@\u0026rsquo;localhost\u0026rsquo; IDENTIFIED WITH mysql_native_password BY \u0026lsquo;your_pass_word\u0026rsquo;; Enter FLUSH PRIVILEGES; Now you can exit then try to log in by new password created. The command to login is mysql -u root -p then type your password.\nNow we can implement our database in this MySQL instance. This is our database diagram: It\u0026rsquo;s easy to see the Transactions table stores the transaction list of the customers. Sender and receiver must be in the Customers table.\nNow type the SQL Queries. After that, we should receive the result like this.\nNow exit MySQL.\n"
},
{
	"uri": "//localhost:1313/4-datastorage/4.1-updateiamrole/",
	"title": "Update IAM Role",
	"tags": [],
	"description": "",
	"content": "For our EC2 instances to be able to send session logs to the S3 bucket, we will need to update the IAM Role assigned to the EC2 instance by adding a policy that allows access to S3.\nUpdate IAM Role Go to IAM service management console Click Roles. Click Create role. Click AWS Service, then choose Lambda service. After that click Next. In the Search box Enter S3, then tick AmazonS3FullAccess. Enter RDS, then tick AmazonRDSDataFullAccess. Then click Next. Now, enter the role name of this lambda function is rds-to-S3. We will see there are 2 policies in this IAM role, and click Create Role. In the production environment, we will grant stricter permissions to the specified S3 bucket. In the framework of this lab, we use the policy AmazonS3FullAccess for convenience.\nNext, we will proceed to create an S3 bucket to store data.\n"
},
{
	"uri": "//localhost:1313/4-datastorage/4.2-creates3bucket/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "In this step, we will create an S3 bucket to store data from RDS instance.\nCreate S3 Bucket Access S3 service management console Click Create bucket. At the Create bucket page. In the Bucket name field, enter the bucket name de-bucket. The name of the S3 bucket must not be the same as all other S3 buckets in the system. You can substitute your name and enter a random number when generating the S3 bucket name.\nScroll down and click Create bucket. Now, click on your new created bucket. Then click Create folder. Enter your folder name raw-data. Then click Create folder. "
},
{
	"uri": "//localhost:1313/3-deploy/3.2-deploy-in-ec2-instance/",
	"title": "Deploy a website in EC2 instance",
	"tags": [],
	"description": "",
	"content": "We\u0026rsquo;ve prepared our database. Now it\u0026rsquo;s time to deploy the website.\nCreate new folder with name source by typing mkdir source. Then cd source.\nDownload source code. Change to branch. In app.js file, change your DB_PASSWORD to the password you created.\nNow download the library.\nEnter sudo apt install npm to download npm library for Javascript. Init your nodejs environment with npm init -y. Download library for our website: npm i express mysql. Run node app.js. We can access to our website by access your_public_IP_linux_instance:3000 in your browser.\nNow access URL your_public_IP_linux_instance:3000/createcustomer\nTry to create some new customers to our website. Notice that phone numbers are unique.\nContinually access URL your_public_IP_linux_instance:3000/createtransaction Try to create some new transactions. Sender_id and receiver_id must be less or equal to the number of customers.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-downloadutils/",
	"title": "Download utils",
	"tags": [],
	"description": "",
	"content": "Download utils In this step, we will download all files we need for this workshop.\nGo to EC2 service management console Navigate to Instances. Click on our created Linux instance. Click Connect to connect to this EC2 instance. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rYou need to create 1 Linux instance on the public subnet and 1 RDS MySQL instance on the private subnet to perform this lab.\nWe will store the website data to the RDS instance and make a daily schedule data pipeline to process and analyze our data.\nContent Prepare VPC, EC2 and RDS Download utils "
},
{
	"uri": "//localhost:1313/4-datastorage/4.3-createlambdafunction/",
	"title": "Create Lambda function",
	"tags": [],
	"description": "",
	"content": " Go to Lambda console Click Create a function. In the Create function: Select Author from scratch. In function name, enter rds-to-s3. Choose Runtime is Python 3.12. Scroll down to Permissions: Select Use an existing role among 3 options. Enter rds-to-s3 to Existing role. Click on Create function. "
},
{
	"uri": "//localhost:1313/3-deploy/",
	"title": "Deploy a website",
	"tags": [],
	"description": "",
	"content": "In this step, we will deploy a website to our EC2 server, located in the public subnets, and connecting to our RDS MySQL instance.\nContent 3.1. Set up MySQL instance 3.2. Deploy a website in EC2 instance\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.2-createsecgroup/",
	"title": "Create security groups",
	"tags": [],
	"description": "",
	"content": "Create security groups In this step, we will proceed to create the security groups used for our instances. As you can see, these security groups will not need to open traditional ports to ssh like port 22 or remote desktop through port 3389.\nCreate security group for Linux instance located in public subnet Go to VPC service management console Click Security Group. Click Create security group. In the Security group name field, enter de-ec2-instance-SG. In the Description section, enter Security Group for ec2 public instance. In the VPC section, click the X to reselect the DE VPC you created for this lab. In the Inbound rules, click Add rule. Set Type to SSH, and set Source to 0.0.0.0/0. Set other inbound rules like this. With Outbound rule, we don\u0026rsquo;t need to change anything. Then click Create security group. Create a security group for an RDS instance located in a private subnet After successfully creating a security group for the Linux instance located in the public subnet, click the Security Groups link to return to the Security groups list. Click Create security group.\nIn the Security group name field, enter de-rds-instance-SG.\nIn the Description section, enter Security Group for RDS MySQL instance. In the VPC section, click the X to reselect the DE VPC you created for this lab. Scroll down, then click Create security group. "
},
{
	"uri": "//localhost:1313/4-datastorage/4.4-createcloudwatchevent/",
	"title": "Monitor session logs",
	"tags": [],
	"description": "",
	"content": "Monitor session logs Access System Manager - Session Manager service management console Click the Preferences tab. Click Edit. Scroll down, at S3 logging, click Enable. Uncheck Allow only encrypted S3 buckets. Click Choose a bucket name from the list. Select the S3 bucket you created. Scroll down, click Save to save the configuration.\nAccess System Manager - Session Manager service management console\nClick Start session. Click Private Windows Instance. Click Start session. Type the command ipconfig. Type the command hostname. Click Terminate to exit the session, click Terminate again to confirm. Check Session logs in S3 Go to S3 service management console Click on the name of the S3 bucket we created for the lab. Click on the object name sessions log On the objects detail page, click Open. Object logs will be opened in a new tab in the browser. You can view the stored commands in session logs. "
},
{
	"uri": "//localhost:1313/4-datastorage/",
	"title": "Move data from RDS to S3",
	"tags": [],
	"description": "",
	"content": "We can manually create a snapshot of our RDS instance, then move it to S3 bucket. But when we need to do it daily, we must automate it by a Lambda function and schedule using CloudWatch.\nContent: Update IAM Role Create S3 Bucket Create Lambda function Create CloudWatch Event "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.3-createec2linux/",
	"title": "Create public EC2 instance",
	"tags": [],
	"description": "",
	"content": " Go to EC2 service management console Click Instances. Click Launch instances. Enter instance name de-linux-instance. Choose your OS Ubuntu On the Amazon Machine Image (AMI), select Ubuntu Server 24.04 LTS which has Free tier. On the Step 2: Choose an Instance Type page. Select your Architecture 64-bit (x86). Click on Instance type t2.micro. In the Key pair, click Create new key pair. Enter key pair name kp-linux. Keep the default setting, then click Create key pair. You will receive a file installed. Now on Network settings, click Edit to edit VPC and Security Group. Choose DE-VPC we have created. Choose DE-subnet-public-1 in Subnet. Enable in Auto-assign public IP. Click Select existing security group, then choose de-ec2-instance-SG we have created. Finally, click Launch instance. "
},
{
	"uri": "//localhost:1313/5-portfwd/",
	"title": "Port Forwarding",
	"tags": [],
	"description": "",
	"content": "\rPort Forwarding is a useful way to redirect network traffic from one IP address - Port to another IP address - Port. With Port Forwarding we can access an EC2 instance located in the private subnet from our workstation.\nWe will configure Port Forwarding for the RDP connection between our machine and Private Windows Instance located in the private subnet we created for this exercise.\nCreate IAM user with permission to connect SSM Go to IAM service management console Click Users , then click Add users. At the Add user page. In the User name field, enter Portfwd. Click on Access key - Programmatic access. Click Next: Permissions. Click Attach existing policies directly.\nIn the search box, enter ssm. Click on AmazonSSMFullAccess. Click Next: Tags, click Next: Reviews. Click Create user. Save Access key ID and Secret access key information to perform AWS CLI configuration.\nInstall and Configure AWS CLI and Session Manager Plugin To perform this hands-on, make sure your workstation has AWS CLI and Session Manager Plugin installed -manager-working-with-install-plugin.html)\nMore hands-on tutorials on installing and configuring the AWS CLI can be found here.\nWith Windows, when extracting the Session Manager Plugin installation folder, run the install.bat file with Administrator permission to perform the installation.\nImplement Portforwarding Run the command below in Command Prompt on your machine to configure Port Forwarding. aws ssm start-session --target (your ID windows instance) --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region (your region) Windows Private Instance Instance ID information can be found when you view the EC2 Windows Private Instance server details.\nExample command: C:\\Windows\\system32\u0026gt;aws ssm start-session --target i-06343d7377486760c --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region ap-southeast-1 If your command gives an error like below: SessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\nProve that you have not successfully installed the Session Manager Plugin. You may need to relaunch Command Prompt after installing Session Manager Plugin.\nConnect to the Private Windows Instance you created using the Remote Desktop tool on your workstation. In the Computer section: enter localhost:9999. Return to the administration interface of the System Manager - Session Manager service. Click tab Session history. We will see session logs with Document name AWS-StartPortForwardingSession. Congratulations on completing the lab on how to use Session Manager to connect and store session logs in S3 bucket. Remember to perform resource cleanup to avoid unintended costs.\n"
},
{
	"uri": "//localhost:1313/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createec2/2.1.4-createrdsmysql/",
	"title": "Create private RDS Instance",
	"tags": [],
	"description": "",
	"content": " Go to RDS service management console Click Databases. Click Create database. Click Standard create, then choose MySQL engine type. We will use Engine version MySQL 8.0.35 We can use Free tier template if we have a free tier AWS account. Change your instance settings. Enter your instance name de-mysql-instance. Set the Master username admin. Select Self managed management. Change your Master password and confirm it. In the Connectivity settings: We want to connect this RDS Instance to the public EC2 instance, so that click Connect to an EC2 compute resource. Choose de-linux-instance we\u0026rsquo;ve created in the EC2 instance. Now we should create our subnet group. Open Subnet group in a new tab. Click on Create DB subnet group. Enter the name de-mysql-instance-subnet-group, and the description Subnet group for mysql instance. Choose DE-vpc. On Availability Zones, choose your 2 AZs on your created VPC. On Subnets, choose 2 private subnets in your VPC. Then we click Create. After creating Subnet group successfully, click Choose existing DB subnet group, and choose what your\u0026rsquo;ve created. And on VPC security group, choose de-rds-instance-SG. Scroll down and click Create Database. It takes a few minutes for our database instance to be created. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]